[ipfs]
    # The multiaddr of the API server for your IPFS node.
    api = "/ip4/127.0.0.1/tcp/5001"

    # Generate URLs using a public gateway. If this is false, ipfs:// URLs will
    # be generated instead.
    use-gateway = true

    # The public gateway to use for generating URLs.
    gateway = "dweb.link"

    # The CAR version to use. Supported values are "1" and "2".
    car-version = "1"

[archive]
    # A template which determines the file name of the archived source content
    # in IPFS.  This is a golang `text/template` template which is passed the
    # contents of the bibtex entry and returns the file name. Functions
    # provided by the sprig library are available in the template. The
    # following fields are available in the template:
    #
    # .Key - The bibtex entry ID
    # .Type - The bibtex entry type (e.g. "article")
    # .Fields - A map of fields that appear in the bibtex entry
    # .Extension - A file extension based on the media type (MIME type), including the leading dot
    file-name = "source{{ .Extension }}"

    # A template which determines the directory name of the archived source
    # content in IPFS.  This is a golang `text/template` template which is
    # passed the contents of the bibtex entry and returns the directory name.
    # Functions provided by the sprig library are available in the template.
    # The following fields are available in the template:
    #
    # .Key - The bibtex entry ID
    # .Type - The bibtex entry type (e.g. "article")
    # .Fields - A map of fields that appear in the bibtex entry
    directory-name = "{{ .Key }}"
    
    # By default, the archived source files in IPFS are each put in their own
    # directory. Wrapping the source files in directories can be disabled using
    # this option. If this is false, `directory-name` is ignored.
    wrap-sources = true

    # If the source URL points to a web page, the tool can search for embedded
    # documents in the page. This is a list of the media types (MIME types) of
    # embedded content to search for. To disable this feature, leave this list
    # empty.
    embedded-types = [
        "application/pdf",
    ]

    # The media types (MIME types) of content that the tool will not attempt to
    # archive.
    excluded-types = []

# Take snapshots of web pages using monolith.
[snapshot]
    # Enable taking snapshots of web pages using monolith.
    enabled = true

    # The path to the monolith binary.
    path = "monolith"

    # Allow invalid x.509 (TLS) certificates.
    allow-insecure = false

    # Include audio sources.
    include-audio = true

    # Inlclude CSS.
    include-css = true

    # Include fonts.
    include-fonts = true

    # Include frames and iframes.
    include-frames = true

    # Include images.
    include-images = true

    # Include JavaScript.
    include-js = true

    # Include video sources.
    include-video = true

    # Include timestamp and source information.
    include-metadata = true

# Resolve sources through a link resolver.
#[[resolvers]]
    # A list of URL schemes to try in order. Each scheme is a golang
    # `text/template` template which returns the proxied URL. If a template
    # evaluates to an empty string, it is ignored. Functions provided by the
    # sprig library are available in the template. The following fields are
    # available in the template:
    #
    # .Doi - The DOI of the entry, excluding the doi: or https://doi.org/ prefix (e.g. 10.1038/nphys1170)
    # .Url.Hostname - The hostname of source URL (e.g. example.com)
    # .Url.Path - The path of the source URL, excluding the leading slash (e.g. about/index.html)
    # .Url.Directory - The directory path of the source URL, excluding the leading slash (e.g. about/)
    # .Url.Filename - The file name of the source URL (e.g. index.html)
    #
    # If the bibtex entry has a URL but not a DOI, the `.Doi` field will be
    # nil. If the bibtex entry has a DOI but not a URL, the `.Url` field will
    # be populated by following an https://doi.org/ link.
    #schemes = [
    #    "{{ if not (empty .Doi) }}https://example.com/{{ .Doi }}{{ end }}",
    #    "https://{{ .Url.Hostname }}.example.com/{{ .Url.Path }}",
    #]

    # Only use this resolver when the source is located at one of these
    # hostnames.  If this list is empty, the resolver will be used for all
    # hosts not excluded by `exclude-hostnames`.
    #include-hostnames = [
    #    "example.org",
    #    "research.example.com",
    #]

    # Don't use this resolver if the source is located at one of these
    # hostnames.
    #exclude-hostnames = [
    #    "example.org",
    #    "research.example.com",
    #]
